export default CandlestickChart;
declare class CandlestickChart {
    constructor(stockData: any, svgWidth: any, svgHeight: any, chartOptions: any);
    chartOptions: any;
    stockData: any;
    svgWidth: any;
    svgHeight: any;
    targetID: any;
    stockid: any;
    golivehandle: any;
    margin: {
        top: number;
        right: number;
        bottom: number;
        left: number;
        innerLeft: number;
        innerRight: number;
        innerBottom: number;
        innertop: number;
    };
    width: number;
    height: number;
    a: number;
    yaxispadding: number;
    tooltipshow: boolean;
    backtestreport: boolean;
    backgroundProp: {
        color: string;
        opacity: number;
    };
    buttonProps: {
        color: string;
        opacity: number;
    };
    topyscalepadding: number;
    livebutton: boolean;
    toggleTrendLine: boolean;
    mdbutton: any;
    fiibutton: any;
    opbutton: any;
    epsbutton: any;
    brlinebutton: any;
    crsibutton: any;
    adxbutton: any;
    atrbutton: any;
    emabutton: any;
    rsibutton: any;
    trendbutton: any;
    zigzagbutton: any;
    closebutton: any;
    cdbutton: any;
    volbutton: any;
    sigbutton: any;
    drawTrendLinePlot(config: any): null | undefined;
    TrendLineData1: any[];
    dataset: {
        xdata: any;
        xdata1: number[];
        xdata2: any[];
        timestamp: any;
        line1: number[];
        open: any;
        high: any;
        low: any;
        close: any;
        ema: any;
        sma: any;
        rsi: any;
        atr: any;
        adx: any;
        ohlckeyvlaue: any;
        volume: any;
        zigzaglineX: any;
        zigzaglineY: any;
        fundaX1: string[];
        fundaY1: {
            x: string;
            y: number;
            z: number;
            z2: number;
        }[];
        fundabarY1: {
            x: string;
            y: number;
            z: number;
            z2: number;
        }[];
        tempfundata: {
            category: string;
            values: number[];
        }[];
        Operating_ProfitX: any[];
        Operating_ProfitY: any[];
        EPS_X: any[];
        EPS_Y: any[];
        HoldingData_X: string[];
        HoldingData_Y: {
            x: string;
            y: any;
            z: any;
            z1: any;
            z2: any;
        }[];
        pricetobreaklineX: any[];
        pricetobreaklineY: any[];
        pricetobreakdownlineX: any[];
        pricetobreakdownlineY: any[];
        crsidataavgY: any;
        crsidataY: any;
        breakoutlines: () => any;
        MDline: () => any;
        SIGNALLINE: any;
        backtestresult: any;
        backtestreport: any;
    };
    xScaleConfig: {
        bot: {
            ypoint: number;
            scaleSide: string;
            scaleType: string;
            scaledatatag: string;
            scalerange: number[];
            datadomain: () => any[];
            mappedwith: string;
            plotaxis: boolean;
            zooming: boolean;
        };
        bot2: {
            ypoint: number;
            scaleSide: string;
            scaleType: string;
            scaledatatag: string;
            scalerange: number[];
            datadomain: () => string[];
            mappedwith: null;
            plotaxis: boolean;
            zooming: boolean;
        };
        FNYEAR_X: {
            ypoint: number;
            scaleSide: string;
            scaleType: string;
            scaledatatag: string;
            scalerange: number[];
            datadomain: () => any[];
            mappedwith: null;
            plotaxis: boolean;
            zooming: boolean;
        };
        FNQUR_X: {
            ypoint: number;
            scaleSide: string;
            scaleType: string;
            scaledatatag: string;
            scalerange: number[];
            datadomain: () => any[];
            mappedwith: null;
            plotaxis: boolean;
            zooming: boolean;
        };
        HOLD_X: {
            ypoint: number;
            scaleSide: string;
            scaleType: string;
            scaledatatag: string;
            scalerange: number[];
            datadomain: () => string[];
            mappedwith: null;
            plotaxis: boolean;
            zooming: boolean;
        };
        top: {
            ypoint: number;
            scaleSide: string;
            scaleType: string;
            scaledatatag: string;
            scalerange: number[];
            datadomain: () => number[];
            mappedwith: null;
            plotaxis: boolean;
            zooming: boolean;
        };
    };
    yScaleConfig: {
        TR: {
            yaxistag: string;
            xpoint: number;
            scaleSide: string;
            ypadding: () => number;
            transform: {
                k: number;
            };
            scaledata_max: () => any;
            scaledata_min: () => any;
            changeRangeTag: boolean;
            visrange: () => any[];
            maxscaledata(): string | undefined;
            minscaledata(): string | undefined;
            datadomain(): any[];
        };
        BR: {
            yaxistag: string;
            xpoint: number;
            scaleSide: string;
            ypadding: () => number;
            transform: {
                k: number;
            };
            scaledata: () => any;
            changeRangeTag: boolean;
            visrange: () => any[];
            maxscaledata(): string | undefined;
            minscaledata(): number;
            datadomain(): (string | number | undefined)[];
        };
        BL: {
            yaxistag: string;
            xpoint: number;
            scaleSide: string;
            ypadding: () => number;
            transform: {
                k: number;
            };
            scaledata: () => number[];
            changeRangeTag: boolean;
            visrange: () => any[];
            maxscaledata(): number | undefined;
            minscaledata(): number | undefined;
            datadomain(): number[];
        };
        CRSI: {
            yaxistag: string;
            xpoint: number;
            scaleSide: string;
            ypadding: () => number;
            transform: {
                k: number;
            };
            scaledata: () => any;
            changeRangeTag: boolean;
            visrange: () => any[];
            maxscaledata(): any;
            minscaledata(): any;
            datadomain(): number[];
        };
        BL1: {
            yaxistag: string;
            xpoint: number;
            scaleSide: string;
            ypadding: () => number;
            transform: {
                k: number;
            };
            scaledata: () => number[];
            changeRangeTag: boolean;
            visrange: () => any[];
            maxscaledata(): number | undefined;
            minscaledata(): number | undefined;
            datadomain(): number[];
        };
        TL: {
            yaxistag: string;
            xpoint: number;
            scaleSide: string;
            ypadding: () => number;
            transform: {
                k: number;
            };
            scaledata: () => number[];
            changeRangeTag: boolean;
            visrange: () => number[];
            maxscaledata(): number | undefined;
            minscaledata(): number | undefined;
            datadomain(): number[];
        };
        BB: {
            yaxistag: string;
            xpoint: number;
            scaleSide: string;
            ypadding: () => number;
            transform: {
                k: number;
            };
            scaledata: () => any;
            changeRangeTag: boolean;
            visrange: () => number[];
            maxscaledata(): string | undefined;
            minscaledata(): number | undefined;
            datadomain(): (string | number | undefined)[];
        };
        BB1: {
            yaxistag: string;
            xpoint: number;
            scaleSide: string;
            ypadding: () => number;
            transform: {
                k: number;
            };
            scaledata: () => (string | number)[];
            changeRangeTag: boolean;
            visrange: () => number[];
            maxscaledata(): any;
            minscaledata(): number | undefined;
            datadomain(): any[];
        };
        FNYEAR_Y: {
            yaxistag: string;
            xpoint: number;
            scaleSide: string;
            ypadding: () => number;
            transform: {
                k: number;
            };
            scaledata: () => any[];
            changeRangeTag: boolean;
            visrange: () => number[];
            maxscaledata(): any;
            minscaledata(): number | undefined;
            datadomain(): any[];
        };
        FNQUR_Y: {
            yaxistag: string;
            xpoint: number;
            scaleSide: string;
            ypadding: () => number;
            transform: {
                k: number;
            };
            scaledata: () => any[];
            changeRangeTag: boolean;
            visrange: () => number[];
            maxscaledata(): any;
            minscaledata(): number | undefined;
            datadomain(): any[];
        };
        HOLD_Y: {
            yaxistag: string;
            xpoint: number;
            scaleSide: string;
            ypadding: () => number;
            transform: {
                k: number;
            };
            scaledata: () => any[];
            changeRangeTag: boolean;
            visrange: () => number[];
            maxscaledata(): any;
            minscaledata(): number | undefined;
            datadomain(): any[];
        };
        BBBAR: {
            yaxistag: string;
            xpoint: number;
            scaleSide: string;
            ypadding: () => number;
            transform: {
                k: number;
            };
            scaledata: () => (string | number)[];
            changeRangeTag: boolean;
            visrange: () => number[];
            maxscaledata(): any;
            minscaledata(): number | undefined;
            datadomain(): any[];
        };
    };
    datatoplot: {
        OHLC: {
            plot: any;
            data: () => {
                xdata: any;
                xdata1: number[];
                xdata2: any[];
                timestamp: any;
                line1: number[];
                open: any;
                high: any;
                low: any;
                close: any;
                ema: any;
                sma: any;
                rsi: any;
                atr: any;
                adx: any;
                ohlckeyvlaue: any;
                volume: any;
                zigzaglineX: any;
                zigzaglineY: any;
                fundaX1: string[];
                fundaY1: {
                    x: string;
                    y: number;
                    z: number;
                    z2: number;
                }[];
                fundabarY1: {
                    x: string;
                    y: number;
                    z: number;
                    z2: number;
                }[];
                tempfundata: {
                    category: string;
                    values: number[];
                }[];
                Operating_ProfitX: any[];
                Operating_ProfitY: any[];
                EPS_X: any[];
                EPS_Y: any[];
                HoldingData_X: string[];
                HoldingData_Y: {
                    x: string;
                    y: any;
                    z: any;
                    z1: any;
                    z2: any;
                }[];
                pricetobreaklineX: any[];
                pricetobreaklineY: any[];
                pricetobreakdownlineX: any[];
                pricetobreakdownlineY: any[];
                crsidataavgY: any;
                crsidataY: any;
                breakoutlines: () => any;
                MDline: () => any;
                SIGNALLINE: any;
                backtestresult: any;
                backtestreport: any;
            };
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        Close: {
            plot: any;
            data: () => any;
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        Volume: {
            plot: any;
            data: () => any;
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        Volume_SMA: {
            plot: any;
            data: () => any;
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        ZigZag: {
            plot: any;
            data: () => any;
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        pricetobreak: {
            plot: any;
            data: () => any[];
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        pricetobreakdownline: {
            plot: any;
            data: () => any[];
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        crsidat: {
            plot: any;
            data: () => any;
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        crsidat_avg: {
            plot: any;
            data: () => any;
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        RSI: {
            plot: any;
            data: () => any;
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        RSI30: {
            plot: any;
            data: () => number[];
            xdatamap: boolean;
            xdata: string;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        RSI70: {
            plot: any;
            data: () => number[];
            xdatamap: boolean;
            xdata: string;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        ATR: {
            plot: any;
            data: () => any;
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        ADX: {
            plot: any;
            data: () => any;
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        ADX20: {
            plot: any;
            data: () => number[];
            xdatamap: boolean;
            xdata: string;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        EPS: {
            plot: any;
            data: () => any[];
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: {
                y: string;
                z: string;
            };
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        OP: {
            plot: any;
            data: () => any[];
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: {
                y: string;
                z: string;
            };
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        FII: {
            plot: any;
            data: () => {
                x: string;
                y: any;
                z: any;
                z1: any;
                z2: any;
            }[];
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: {
                y: string;
                z: string;
                z1: string;
                z2: string;
            };
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        EMA1: {
            plot: any;
            data: () => any;
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        EMA: {
            plot: any;
            data: () => any;
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        BREOUTLINES: {
            plot: any;
            data: () => any;
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: string;
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        MDLINES: {
            plot: any;
            data: () => any;
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: {
                y: string;
                z: string;
            };
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
        SIGNALLINE: {
            plot: any;
            data: () => any;
            xdata: string;
            xdatamap: boolean;
            linetype: string;
            color: {
                y: string;
                z: string;
            };
            yscalenumber: number;
            fill: string;
            strokewidth: number;
            strokedasharray: string;
            yscaletag: string;
            xscaletag: string;
            plottype: string;
            tagclass: string;
        };
    };
    uniqueYscaletags: string[];
    yAxisConfig: any[];
    uniqueXscaletags: string[];
    buttonPanelParams: {
        className: string;
        x: number;
        y: number;
        width: number;
        height: number;
        color: string;
    }[];
    buttonObjects: ({
        plot: boolean;
        imageUrl: null;
        classtag: string;
        label: string;
        color: string;
        opacity: number;
        pressstatus: boolean;
        panelName: string;
        onClickHandler: () => any;
        buttonclick: () => any;
        stockid?: undefined;
    } | {
        plot: boolean;
        imageUrl: null;
        classtag: string;
        label: string;
        color: string;
        opacity: number;
        pressstatus: string;
        panelName: string;
        onClickHandler: () => void;
        buttonclick: () => void;
        stockid?: undefined;
    } | {
        plot: boolean;
        imageUrl: null;
        classtag: string;
        label: string;
        color: string;
        opacity: number;
        pressstatus: any;
        panelName: string;
        onClickHandler: () => null | undefined;
        buttonclick: () => null | undefined;
        stockid?: undefined;
    } | {
        plot: boolean;
        imageUrl: null;
        classtag: string;
        label: string;
        color: string;
        opacity: number;
        pressstatus: string;
        panelName: string;
        stockid: string;
        buttonclick: () => void;
        onClickHandler?: undefined;
    })[];
    dragBehavior: d3.DragBehavior<Element, any, any>;
    initChart(): void;
    setupSVG(): void;
    svg: d3.Selection<SVGSVGElement, any, HTMLElement, any> | d3.Selection<d3.BaseType, any, HTMLElement, any> | undefined;
    axisarea: d3.Selection<SVGGElement, any, HTMLElement, any> | undefined;
    chartarea: d3.Selection<SVGGElement, any, HTMLElement, any> | undefined;
    crosstooltiparea: any;
    tooltip: d3.Selection<SVGGElement, any, HTMLElement, any> | undefined;
    zoomareaX: d3.Selection<SVGGElement, any, HTMLElement, any> | undefined;
    zoomareaY: d3.Selection<SVGGElement, any, HTMLElement, any> | undefined;
    trlineara: d3.Selection<SVGGElement, any, HTMLElement, any> | undefined;
    setupCrosshair(): void;
    moveCrosshair(event: any): number | null | undefined;
    crosshairX: any;
    crosshairTextBackground: any;
    crosshairText: any;
    crosshairY: any;
    hideCrosshair(): void;
    handleMouseDown(event: any): void;
    mousehandleclick(event: any): null | undefined;
    handleDoubleClick(event: any): void;
    setupEventTopArea(): void;
    setupScales(): void;
    setupXScale(): void;
    setupYScales(): void;
    yAxisRange: {} | undefined;
    setupZoom(): void;
    zoomX: d3.ZoomBehavior<Element, any> | undefined;
    zoomY: d3.ZoomBehavior<Element, any> | undefined;
    zoomedY: (event: any) => null | undefined;
    xaxisgenerator(xScale: any, xAxisObject?: {}): (d3.Axis<d3.AxisDomain> & ((domainValue: d3.AxisDomain, index: number) => string)) | undefined;
    yaxisgenerator(yScale: any, yAxisObject?: {}, yscaletag?: string): d3.Axis<d3.AxisDomain>;
    restzoom(): void;
    trendline(prop: any): void;
    handleplotData(buttonoptios: any): null | undefined;
    createButtonPanel(params: any): d3.Selection<SVGGElement, any, HTMLElement, any>;
    setupEventHandlers(): void;
    createButtonArray: (filteredpanelobject: any, buttonArray: any) => void;
    renderAxes(): void;
    updateAxes_x(currentTransformX: any): void;
    updateAxes_y(): void;
    renderChart(): void;
    renderYAxisLines(): void;
    drawdatatoPlot(config: any): null | undefined;
    dbClicktoDelete(event: any): void;
    handleDragStart: (event: any) => void;
    handleDrag(event: any): null | undefined;
    handleDragEnd(event: any): void;
    drawLineScatterPlot(config: any, currentXscale: any, currentYscale: any, xlinedatatag: any, ylinedata: any): void;
    drawLinePlot(config: any, currentXscale: any, currentYscale: any, xlinedatatag: any, ylinedata: any): void;
    drawBarPlot(config: any, currentXscale: any, currentYscale: any, xlinedatatag: any, ylinedata: any): void;
    drawCDPlot(config: any, filteredData: any, currentXscale: any, currentYscale: any, currentyaxis: any): void;
    zoomedYold: (event: any) => null | undefined;
    zoomedX: (event: any) => null | undefined;
    updateDataDomain(yscaletag: any, newDomain: any): void;
    updateChart(newDataObject: any, isstocklive: any): void;
    createSVGButton(buttonObject: any): void;
    createSVGButtonsingle(x: any, y: any, width: any, height: any, text: any, color: any, onClickHandler: any): void;
}
import * as d3 from "d3";

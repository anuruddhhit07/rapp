import*as t from"d3";var e={126:(t,e,o)=>{o.d(e,{Aw:()=>i,Gi:()=>a,Yh:()=>l,mb:()=>r}),o(507);let a=o(625).O1,l={},r={},i={plotName:new Set,xscaleTag:new Set,yscaleTag:new Set,yaxisTag:new Set}},625:(t,e,o)=>{o.d(e,{O1:()=>a});const a={timestamp:[],xindex:[],open:[],high:[],low:[],close:[],volume:[]}},507:(t,e,o)=>{var a;t.exports=(a={},o.d(a,{}),a)}},o={};function a(t){var l=o[t];if(void 0!==l)return l.exports;var r=o[t]={exports:{}};return e[t](r,r.exports,a),r.exports}a.d=(t,e)=>{for(var o in e)a.o(e,o)&&!a.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var l={};(()=>{a.d(l,{Rg:()=>r,rF:()=>o,rd:()=>i,sx:()=>s});var t=a(126);function e(t){const e=new Date(1e3*t);return`${String(e.getDate()).padStart(2,"0")}/${String(e.getMonth()+1).padStart(2,"0")}/${e.getFullYear()}:${String(e.getHours()).padStart(2,"0")}:${String(e.getMinutes()).padStart(2,"0")}`}function o(o,a,l){if(Number.isNaN(a))return;l.selectAll(`.tooliptext-${o}-${this.plotName}`).remove();const r=[0,50,150,80,80,80],i=[{I:{value:a}},{D:{value:e(t.Gi.timestamp[a]),color:"blue"}},{O:{value:t.Gi.open[a].toFixed(2),color:"blue"}},{H:{value:t.Gi.high[a].toFixed(2),color:"green"}},{L:{value:t.Gi.low[a].toFixed(2),color:"red"}},{C:{value:t.Gi.close[a].toFixed(2),color:"blue"}}];let s=0;for(const t of i)for(const e in t)if(t.hasOwnProperty(e)){const a=t[e].value;l.append("text").attr("class",`tooliptext-${o}-${this.plotName}`).attr("x",r.slice(0,s+1).reduce(((t,e)=>t+e),0)).attr("y",10).append("tspan").text(`${e}: ${a}`).attr("fill",t[e].color||"black"),s++}}function r(e,o,a){a.selectAll(`.tooliptext-${e}-${this.plotName}`).remove();const l=[0,40,70,70,70],r=[{V:{value:t.Gi.volume[o],color:"blue"}}];let i=0;for(const t of r)for(const o in t)if(t.hasOwnProperty(o)){const r=t[o].value;a.append("text").attr("class",`tooliptext-${e}-${this.plotName}`).attr("x",l.slice(0,i+1).reduce(((t,e)=>t+e),0)).attr("y",10).append("tspan").text(`${o}: ${r}`).attr("fill",t[o].color||"black"),i++}}function i(t,e,o){o.selectAll(`.tooliptext-${t}-${this.plotName}`).remove();const a=[0,40,70,70,70],l=[{[this.plotName]:{value:this.ydata()[e].toFixed(2),color:"black"}}];let r=0;for(const e of l)for(const l in e)if(e.hasOwnProperty(l)){const i=e[l].value;o.append("text").attr("class",`tooliptext-${t}-${this.plotName}`).attr("x",a.slice(0,r+1).reduce(((t,e)=>t+e),0)).attr("y",10).append("tspan").text(`${l}: ${i}`).attr("fill",e[l].color||"black"),r++}}function s(e,o){Array.from(t.Aw.plotName).forEach((a=>{const l=t.mb[a];if(l&&l.tooltip&&l.getTooltipHTML){const r=l.yscaleTag,i=t.Yh[r].yaxisTag,s=e.select(`.tooltip-${i}-${a}`);l.getTooltipHTML(i,o,s)}}))}})();var r=l.rd,i=l.rF,s=l.Rg,n=l.sx;export{r as getTooltipHTMLLine,i as getTooltipHTMLOHLC,s as getTooltipHTMLVolume,n as updateTooltips};